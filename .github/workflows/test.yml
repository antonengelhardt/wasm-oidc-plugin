name: Test

on:
  pull_request:

jobs:
    test:
      runs-on: ubuntu-latest
      container:
        image: antonengelhardt/rust-docker-tools

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Cache dependencies
          uses: actions/cache@v2
          with:
            path: target
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

        - name: Cargo Deny
          uses: EmbarkStudios/cargo-deny-action@v1

        - name: Run Rust tests
          run: |
            rustc --version && cargo --version
            cargo clippy
            cargo test --workspace --verbose

    build:
      runs-on: ubuntu-latest
      container:
        image: antonengelhardt/rust-docker-tools
      # needs: [test]

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Cache dependencies
          uses: actions/cache@v2
          with:
            path: target
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

        - name: Build WASM OIDC Plugin
          run: |
            cargo build --target wasm32-wasi --release

        - name: Upload plugin as artifact
          uses: actions/upload-artifact@v2
          with:
            name: plugin
            path: target/wasm32-wasi/release/wasm_oidc_plugin.wasm

    integration-test:
      runs-on: ubuntu-latest
      container:
        image: antonengelhardt/wasm-oidc-plugin-integration-tests
      needs: [build]

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Download plugin from build job
          uses: actions/download-artifact@v2
          with:
            name: plugin
            path: target/wasm32-wasi/release/wasm_oidc_plugin.wasm

        - name: Create .env for Integration tests
          run: |
            echo "CI=true" >> integration-tests/.env
            echo "WASM_OIDC_PLUGIN_TEST_EMAIL={{ secrets.WASM_OIDC_PLUGIN_TEST_EMAIL }}" >> integration-tests/.env
            echo "WASM_OIDC_PLUGIN_TEST_PASSWORD={{ secrets.WASM_OIDC_PLUGIN_TEST_PASSWORD }}" >> integration-tests/.env
            sed -i 's/client_secret: \"redacted\"/client_secret: \"${{ secrets.WASM_OIDC_PLUGIN_TEST_CLIENT_SECRET }}\"/g' integration-tests/envoy.yaml
            sed -i 's/aes_key: \"redacted\"/aes_key: \"${{ secrets.WASM_OIDC_PLUGIN_TEST_AES_KEY }}\"/g' integration-tests/envoy.yaml

        - name: Install Docker
          run: |
            apk update
            # apk add docker
            apk add curl

        - name: Start Containers & Run Integration tests
          run: |
            cd integration-tests
            ls -la

            echo "Starting httpbin container"
            docker run -d -p 80:80 --name httpin docker.io/kennethreitz/httpbin

            echo "Creating Envoy container"
            docker container create --name envoy -p 10000:10000 docker.io/envoyproxy/envoy:v1.29-latest envoy -c /etc/envoy/envoy.yaml --concurrency 1

            echo "Copying files to Envoy container because Alpine doesn't like mounting files to files"
            docker cp ../target/wasm32-wasi/release/wasm_oidc_plugin.wasm envoy:/etc/envoy/proxy-wasm-plugins
            docker cp envoy.yaml envoy:/etc/envoy/envoy.yaml

            echo "Starting Envoy container"
            docker start envoy

            sleep 5
            docker ps
            docker logs envoy

            # Testing curl
            curl -X GET http://localhost:10000/get

            # Get the gateway of the envoy container
            export GATEWAY=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' envoy)

            echo "Running Integration Tests"
            pytest test.py
